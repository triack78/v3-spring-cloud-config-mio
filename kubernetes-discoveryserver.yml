---
apiVersion: v1
kind: List
# Con questo kind posso creare un numero non predefinito di oggetti sotto items
items:
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: spring-cloud-kubernetes-discoveryserver
      name: spring-cloud-kubernetes-discoveryserver
    spec:
      ports:
        - name: http
          port: 80 # La porta con cui espongo il servizio agli altri microservizi, non cozza con keyclient in quanto il type e' ClusterIP e non LoadBalancer 
          targetPort: 8761
      selector:
        app: spring-cloud-kubernetes-discoveryserver
      type: ClusterIP
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app: spring-cloud-kubernetes-discoveryserver
      name: spring-cloud-kubernetes-discoveryserver
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding #Stiamo associando un ruolo al service account 
    metadata:
      labels:
        app: spring-cloud-kubernetes-discoveryserver
      name: spring-cloud-kubernetes-discoveryserver:view
    roleRef:
      kind: Role
      apiGroup: rbac.authorization.k8s.io
      name: namespace-reader #Definisco il ruolo e sotto specifico le rules
    subjects:
      - kind: ServiceAccount
        name: spring-cloud-kubernetes-discoveryserver
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      namespace: default
      name: namespace-reader #Il ruolo vero e proprio
    rules:
      - apiGroups: ["", "extensions", "apps"]
        resources: ["services", "endpoints","pods"] #Aggiunto pods senn√≤ It doesn't work.
        verbs: ["get", "list", "watch"]
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: spring-cloud-kubernetes-discoveryserver-deployment
    spec:
      selector:
        matchLabels:
          app: spring-cloud-kubernetes-discoveryserver
      template:
        metadata:
          labels:
            app: spring-cloud-kubernetes-discoveryserver
        spec:
          serviceAccount: spring-cloud-kubernetes-discoveryserver # Il nome del servizio che avevamo deciso in precedenza.
          containers:
          - name: spring-cloud-kubernetes-discoveryserver
            image: springcloud/spring-cloud-kubernetes-discoveryserver:3.1.3 # L'immagine che vogliamo usare all'interno del kubernetes cluster (e' una spring boot application)
            imagePullPolicy: IfNotPresent # Scarica l'immagine solo se non presente nel filesystem
            #Simile a quanto presente nel docker compose file: si puo' anche non mettere, kubernetes e' smart abbastanza da riavviare le applicazioni fino a che non vanno
            #Healt check e' esposto dallo spring boot actuator
            #Attenzione: queste verifiche vengono fatte ogni 10 - 20 secondi: troppo breve, l'applicazione si riavviera' all'infinito.
            readinessProbe:
              httpGet:
                port: 8761
                path: /actuator/health/readiness
              initialDelaySeconds: 100 # All'inizio aspettera' 100 secondi prima di effettuare il check 
              periodSeconds: 30 # Valuta la readiness ogni 30 secondi
              
            livenessProbe:
              httpGet:
                port: 8761
                path: /actuator/health/liveness
            ports:
            - containerPort: 8761